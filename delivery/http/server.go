package http

import (
	"fmt"
	"net/http"

	"github.com/xujiajun/gorouter"
)

// NewServer func returns a new instance of the Server structure
func NewServer(port, version string) *Server {
	mux := gorouter.New()
	mux.PanicHandler = panicHandler
	mux.NotFoundFunc(notFoundHandler)
	return &Server{router: mux, listenPort: port, apiVersion: version}
}

// Server structure
// autoTLSMode enables automatically generation of a new LetsEncrypt certificate.
// customCrtPath and customCrtKeyPath to add a custom TS certificate.
// if autoTLSMode is enabled, custom ceritficates will be ignored.
type Server struct {
	router           *gorouter.Router
	listenPort       string
	apiVersion       string
	autoTLSMode      bool
	customCrtPath    string
	customCrtKeyPath string
}

// ListenAndServe function to handle requests on incoming connections via http
func (s *Server) ListenAndServe() error {
	// Application health check endpoint
	s.router.GET("/health", healthCheckHandler)

	// Middlewares
	// TODO: there are middlewares for test. This part should be rewritten
	// s.router.NotFoundFunc(notFoundFunc)
	// s.router.Use(withLogging, withTracing, withStatusRecord)

	// Set up API routes with prefix
	api := s.router.Group(s.apiVersion)
	setupRoutes(api)

	// Start web server with autogenerated LetsEncrypt certificates
	if s.autoTLSMode {
		// TODO: implement autogeneration of LetsEncrypt certificates
	}

	// Start web server with custom TLS certificates
	if s.customCrtPath != "" && s.customCrtKeyPath != "" {
		return http.ListenAndServeTLS(s.listenPort, s.customCrtPath, s.customCrtKeyPath, s.router)
	}

	// Start web server
	return http.ListenAndServe(s.listenPort, s.router)
}

// Health check endpoint
func healthCheckHandler(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("OK"))
}

func panicHandler(w http.ResponseWriter, req *http.Request, err interface{}) {
	w.WriteHeader(http.StatusInternalServerError)
	fmt.Println("err from recover is :", err)
	fmt.Fprint(w, "received a panic")
}

func notFoundHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotFound)
	fmt.Fprint(w, "404 page !!!")
}
